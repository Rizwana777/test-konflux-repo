apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: argo-rollouts-integration-test
spec:
  params:
    - name: IMAGE_URL
      description: 'The Argo Rollouts image to test'
      default: 'quay.io/redhat-user-workloads/rh-ee-rnaaz-tenant/test-konflux-application/test-konflux-repo:6982eadb33629d194d91282d31929b1b262e8741'
    - name: EXPECTED_BINARIES
      description: 'List of binaries expected in the image'
      default: 'kubectl-argo-rollouts-linux-amd64,kubectl-argo-rollouts-linux-arm64,kubectl-argo-rollouts-darwin-amd64,kubectl-argo-rollouts-darwin-arm64'
  tasks:
    - name: pull-and-verify-binaries
      taskSpec:
        params:
          - name: IMAGE_URL
            default: 'quay.io/redhat-user-workloads/rh-ee-rnaaz-tenant/test-konflux-application/test-konflux-repo:6982eadb33629d194d91282d31929b1b262e8741'
          - name: EXPECTED_BINARIES
            default: 'kubectl-argo-rollouts-linux-amd64,kubectl-argo-rollouts-linux-arm64,kubectl-argo-rollouts-darwin-amd64,kubectl-argo-rollouts-darwin-arm64'
        volumes:
          - name: oras-volume
            emptyDir: {}  # Using an emptyDir volume to share data across steps
        steps:
          # Step 1: Install ORAS (version 1.2.0)
          - name: install-oras
            image: registry.access.redhat.com/ubi8/ubi
            script: |
              VERSION="1.2.0"
              echo "Installing ORAS version $VERSION..."
              curl -LO "https://github.com/oras-project/oras/releases/download/v${VERSION}/oras_${VERSION}_linux_amd64.tar.gz"
              mkdir -p /workspace/oras-install/
              tar -zxf oras_${VERSION}_*.tar.gz -C /workspace/oras-install/
              rm -rf oras_${VERSION}_*.tar.gz
              
              # Verify installation
              /workspace/oras-install/oras version
            volumeMounts:
              - name: oras-volume
                mountPath: /workspace/oras-install

          # Step 2: Pull the image, extract the binaries using ORAS and verify the expected binaries exist
          - name: pull-extract-and-verify-binaries
            image: registry.access.redhat.com/ubi8/ubi
            script: |
              echo "Pulling the image $(params.IMAGE_URL) with ORAS and extracting binaries..."

              # Create a directory for OCI layout
              mkdir -p ./oci-layout

              # Pull all image layers using ORAS and store in the OCI layout directory
              /workspace/oras-install/oras copy $(params.IMAGE_URL) --to-oci-layout ./oci-layout

              # List the pulled files
              echo "Listing files in OCI layout:"
              find ./oci-layout

              # Move the binaries from the layout to ./platform-binaries
              mkdir -p ./platform-binaries
              cp ./oci-layout/blobs/sha256/* ./platform-binaries
              
              # Extract the binaries
              for blob in $(ls ./oci-layout/blobs/sha256/*); do
                tar tf ${blob} &> /dev/null && tar tvf ${blob} | grep 'kubectl-argo-rollouts' &> /dev/null && tar xvf ${blob} -C ./platform-binaries 'kubectl-argo-rollouts-*'
              done
              
              echo "List the extracted binaries to verify"
              ls ./platform-binaries

              echo "Verify that expected binaries exist"
              IFS=',' read -r -a binaries <<< "$(params.EXPECTED_BINARIES)"
              for binary in "${binaries[@]}"; do
                if [[ ! -f "./platform-binaries/$binary" ]]; then
                  echo "ERROR: $binary not found!"
                  exit 1
                else
                  echo "$binary exists."
                fi
              done
              echo "All expected binaries verified successfully!"
            volumeMounts:
              - name: oras-volume
                mountPath: /workspace/oras-install
